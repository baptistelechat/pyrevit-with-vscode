from typing import Tuple, Set, Iterable, List


class PyRevitAttachmentType:
    AllUsers = 0
    CurrentUser = 1


class PyRevitAttachment:
    def __init__(self, manifest: RevitAddonManifest, product: RevitProduct, attachmentType: PyRevitAttachmentType): ...
    def ToString(self) -> str: ...
    @property
    def Manifest(self) -> RevitAddonManifest: ...
    @property
    def Product(self) -> RevitProduct: ...
    @property
    def AttachmentType(self) -> PyRevitAttachmentType: ...
    @property
    def Clone(self) -> PyRevitClone: ...
    @property
    def Engine(self) -> PyRevitEngine: ...
    @property
    def AllUsers(self) -> bool: ...
    def SetClone(self, clone: PyRevitClone) -> None: ...
    def IsReadOnly(self) -> bool: ...


class PyRevitAttachments:
    def Attach(revitYear: int, clone: PyRevitClone, engineVer: PyRevitEngineVersion, allUsers: bool, force: bool) -> None: ...
    def AttachToAll(clone: PyRevitClone, engineVer: PyRevitEngineVersion, allUsers: bool) -> None: ...
    @overload
    def Detach(revitYear: int, currentAndAllUsers: bool) -> None: ...
    @overload
    def Detach(attachment: PyRevitAttachment, currentAndAllUsers: bool) -> None: ...
    def DetachAll(currentAndAllUsers: bool) -> None: ...
    def GetAttachments() -> List: ...
    def GetAllAttached(revitYear: int) -> List: ...
    def GetAttached(revitYear: int) -> PyRevitAttachment: ...


class PyRevitBindings:
    def ActivateResolver() -> None: ...


class PyRevitBundleTypes:
    Unknown = 0
    Tab = 1
    Panel = 2
    Stack = 3
    PullDown = 4
    SplitButton = 5
    SplitPushButton = 6
    PushButton = 7
    SmartButton = 8
    ToggleButton = 9
    PanelButton = 10
    NoButton = 11
    LinkButton = 12
    InvokeButton = 13
    ContentButton = 14
    URLButton = 15


class PyRevitBundle:
    def __init__(self): ...
    def GetBundleDirExt(bundleType: PyRevitBundleTypes) -> str: ...
    def IsType(bundlePath: str, bundleType: PyRevitBundleTypes) -> bool: ...


class PyRevitCaches:
    def GetCacheDirectory(revitYear: int) -> str: ...
    def ClearCache(revitYear: int) -> None: ...
    def ClearAllCaches() -> None: ...


class PyRevitCloneFromImageArgs:
    def ToString(self) -> str: ...


class PyRevitClone:
    def __init__(self, clonePath: str, name: str): ...
    @property
    def Name(self) -> str: ...
    @property
    def ClonePath(self) -> str: ...
    @property
    def ExtensionsPath(self) -> str: ...
    def ToString(self) -> str: ...
    @property
    def IsRepoDeploy(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def HasDeployments(self) -> bool: ...
    @property
    def ModuleVersion(self) -> str: ...
    @property
    def Branch(self) -> str: ...
    @property
    def Tag(self) -> str: ...
    @property
    def Commit(self) -> str: ...
    @property
    def ShortCommit(self) -> str: ...
    @property
    def Origin(self) -> str: ...
    @property
    def Deployment(self) -> PyRevitDeployment: ...
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    def Matches(self, copyNameOrPath: str) -> bool: ...
    def Rename(self, newName: str) -> None: ...
    @overload
    def GetEngines(self) -> List: ...
    @overload
    def GetEngine(self, engineVer: PyRevitEngineVersion) -> PyRevitEngine: ...
    @overload
    def GetConfiguredEngine(self, engineId: str) -> PyRevitEngine: ...
    @overload
    def GetConfiguredEngines(self) -> List: ...
    @overload
    def GetConfiguredDeployments(self) -> List: ...
    @overload
    def SetBranch(self, branchName: str) -> None: ...
    @overload
    def SetTag(self, tagName: str) -> None: ...
    @overload
    def SetCommit(self, commitHash: str) -> None: ...
    @overload
    def SetOrigin(self, originUrl: str) -> None: ...
    @property
    def DeploymentArgs(self) -> PyRevitCloneFromImageArgs: ...
    @overload
    def GetExtensions(self) -> List: ...
    @overload
    def GetExtension(self, searchPattern: str) -> PyRevitExtension: ...
    def IsDeployedWithRepo(clonePath: str) -> bool: ...
    def GetExtensionsPath(clonePath: str) -> str: ...
    def GetPyRevitLibPath(clonePath: str) -> str: ...
    def GetPyRevitPath(clonePath: str) -> str: ...
    def GetPyRevitVersionFilePath(clonePath: str) -> str: ...
    def GetPyRevitFilePath(clonePath: str) -> str: ...
    def VerifyCloneValidity(clonePath: str) -> None: ...
    def GetCloneFromManifest(manifest: RevitAddonManifest) -> PyRevitClone: ...
    def IsCloneValid(clonePath: str) -> bool: ...
    @overload
    def GetEngine(clonePath: str, engineVer: PyRevitEngineVersion) -> PyRevitEngine: ...
    def GetDefaultEngine(clonePath: str) -> PyRevitEngine: ...
    @overload
    def GetEngines(clonePath: str) -> List: ...
    @overload
    def GetConfiguredEngine(clonePath: str, engineId: str) -> PyRevitEngine: ...
    @overload
    def GetConfiguredEngines(clonePath: str) -> List: ...
    @overload
    def GetConfiguredDeployments(clonePath: str) -> List: ...
    def GetCurrentDeployment(clonePath: str) -> PyRevitDeployment: ...
    def VerifyHasDeployments(clonePath: str) -> bool: ...
    def GetDeployedVersion(clonePath: str) -> str: ...
    def GetDeployedBranch(clonePath: str) -> str: ...
    def GetBranch(clonePath: str) -> str: ...
    def GetTag(clonePath: str) -> str: ...
    def GetCommit(clonePath: str) -> str: ...
    def GetOrigin(clonePath: str) -> str: ...
    @overload
    def SetBranch(clonePath: str, branchName: str) -> None: ...
    @overload
    def SetTag(clonePath: str, tagName: str) -> None: ...
    @overload
    def SetCommit(clonePath: str, commitHash: str) -> None: ...
    @overload
    def SetOrigin(clonePath: str, originUrl: str) -> None: ...
    @overload
    def GetExtensions(clonePath: str) -> List: ...
    @overload
    def GetExtension(clonePath: str, searchPattern: str) -> PyRevitExtension: ...
    def IsPyRevitAssembly(assm: Assembly) -> bool: ...


class pyRevitInvalidPyRevitCloneException(pyRevitInvalidGitCloneException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, invalidClonePath: str): ...
    @property
    def Message(self) -> str: ...


class PyRevitClones:
    def RegisterClone(cloneName: str, repoPath: str, forceUpdate: bool) -> None: ...
    def RenameClone(cloneName: str, newName: str) -> None: ...
    def UnregisterClone(clone: PyRevitClone) -> None: ...
    def UnregisterAllClones() -> None: ...
    def GetRegisteredClones() -> List: ...
    def GetRegisteredClone(cloneNameOrRepoPath: str) -> PyRevitClone: ...
    def CreateImageFromClone(clone: PyRevitClone, paths: Iterable[str], destPath: str) -> None: ...
    def IsAtLeastOneClones() -> bool: ...
    def DeployFromRepo(cloneName: str, deploymentName: str, branchName: str, repoUrl: str, destPath: str, credentials: GitInstallerCredentials) -> None: ...
    def DeployFromImage(cloneName: str, deploymentName: str, branchName: str, imagePath: str, destPath: str) -> None: ...
    def Delete(clone: PyRevitClone, clearConfigs: bool) -> None: ...
    def DeleteAllClones(clearConfigs: bool) -> None: ...
    def Update(clone: PyRevitClone, credentials: GitInstallerCredentials) -> None: ...
    def UpdateAllClones(credentials: GitInstallerCredentials) -> None: ...
    def SaveRegisteredClones(clonesList: Iterable[PyRevitClone]) -> None: ...


class PyRevitConfig:
    def __init__(self, cfgFilePath: str, adminMode: bool): ...
    @property
    def ConfigFilePath(self) -> str: ...
    def SaveConfigFile(self) -> None: ...
    def GetValue(self, sectionName: str, keyName: str) -> str: ...
    def GetListValue(self, sectionName: str, keyName: str) -> List: ...
    def GetDictValue(self, sectionName: str, keyName: str) -> Dictionary: ...
    @overload
    def SetValue(self, sectionName: str, keyName: str, stringValue: str) -> None: ...
    @overload
    def SetValue(self, sectionName: str, keyName: str, boolValue: bool) -> None: ...
    @overload
    def SetValue(self, sectionName: str, keyName: str, intValue: int) -> None: ...
    @overload
    def SetValue(self, sectionName: str, keyName: str, listString: Iterable[str]) -> None: ...
    @overload
    def SetValue(self, sectionName: str, keyName: str, dictString: IDictionary) -> None: ...
    def DeleteValue(self, sectionName: str, keyName: str) -> bool: ...


class PyRevitConfigValueNotSet(PyRevitException):
    def __init__(self, sectionName: str, keyName: str): ...
    @property
    def ConfigSection(self) -> str: ...
    @ConfigSection.setter
    def ConfigSection(self, value: str) -> None: ...
    @property
    def ConfigKey(self) -> str: ...
    @ConfigKey.setter
    def ConfigKey(self, value: str) -> None: ...
    @property
    def Message(self) -> str: ...


class PyRevitLogLevels:
    Quiet = 0
    Verbose = 1
    Debug = 2


class PyRevitConfigs:
    def GetConfigFile() -> PyRevitConfig: ...
    def DeleteConfig() -> None: ...
    def SeedConfig(lockSeedConfig: bool) -> None: ...
    def SetupConfig(templateConfigFilePath: str) -> None: ...
    def GetUTCStamps() -> bool: ...
    def SetUTCStamps(state: bool) -> None: ...
    def GetRoutesServerStatus() -> bool: ...
    def SetRoutesServerStatus(state: bool) -> None: ...
    def EnableRoutesServer() -> None: ...
    def DisableRoutesServer() -> None: ...
    def GetRoutesServerHost() -> str: ...
    def SetRoutesServerHost(host: str) -> None: ...
    def GetRoutesServerPort() -> int: ...
    def SetRoutesServerPort(port: int) -> None: ...
    def GetRoutesLoadCoreAPIStatus() -> bool: ...
    def SetRoutesLoadCoreAPIStatus(state: bool) -> None: ...
    def GetTelemetryStatus() -> bool: ...
    def SetTelemetryStatus(state: bool) -> None: ...
    def GetTelemetryFilePath() -> str: ...
    def GetTelemetryServerUrl() -> str: ...
    def EnableTelemetry(telemetryFileDir: str, telemetryServerUrl: str) -> None: ...
    def GetTelemetryIncludeHooks() -> bool: ...
    def SetTelemetryIncludeHooks(state: bool) -> None: ...
    def DisableTelemetry() -> None: ...
    def GetAppTelemetryStatus() -> bool: ...
    def SetAppTelemetryStatus(state: bool) -> None: ...
    def GetAppTelemetryServerUrl() -> str: ...
    def EnableAppTelemetry(apptelemetryServerUrl: str) -> None: ...
    def DisableAppTelemetry() -> None: ...
    def GetAppTelemetryFlags() -> str: ...
    def SetAppTelemetryFlags(flags: str) -> None: ...
    def GetBinaryCaches() -> bool: ...
    def SetBinaryCaches(state: bool) -> None: ...
    def GetCheckUpdates() -> bool: ...
    def SetCheckUpdates(state: bool) -> None: ...
    def GetAutoUpdate() -> bool: ...
    def SetAutoUpdate(state: bool) -> None: ...
    def GetRocketMode() -> bool: ...
    def SetRocketMode(state: bool) -> None: ...
    def GetLoggingLevel() -> PyRevitLogLevels: ...
    def SetLoggingLevel(level: PyRevitLogLevels) -> None: ...
    def GetFileLogging() -> bool: ...
    def SetFileLogging(state: bool) -> None: ...
    def GetStartupLogTimeout() -> int: ...
    def SetStartupLogTimeout(timeout: int) -> None: ...
    def GetRequiredHostBuild() -> str: ...
    def SetRequiredHostBuild(buildnumber: str) -> None: ...
    def GetMinHostDriveFreeSpace() -> int: ...
    def SetMinHostDriveFreeSpace(freespace: int) -> None: ...
    def GetLoadBetaTools() -> bool: ...
    def SetLoadBetaTools(state: bool) -> None: ...
    def GetCpythonEngineVersion() -> int: ...
    def SetCpythonEngineVersion(version: int) -> None: ...
    def GetUserLocale() -> str: ...
    def SetUserLocale(localCode: str) -> None: ...
    def GetOutputStyleSheet() -> str: ...
    def SetOutputStyleSheet(outputCSSFilePath: str) -> None: ...
    def GetUserCanUpdate() -> bool: ...
    def GetUserCanExtend() -> bool: ...
    def GetUserCanConfig() -> bool: ...
    def SetUserCanUpdate(state: bool) -> None: ...
    def SetUserCanExtend(state: bool) -> None: ...
    def SetUserCanConfig(state: bool) -> None: ...
    def GetColorizeDocs() -> bool: ...
    def SetColorizeDocs(state: bool) -> None: ...
    def GetAppendTooltipEx() -> bool: ...
    def SetAppendTooltipEx(state: bool) -> None: ...


class PyRevitConsts:
    def FindConfigFileInDirectory(sourcePath: str) -> str: ...
    @property
    def DefaultExtensionsPath() -> str: ...
    @property
    def ConfigFilePath() -> str: ...
    @property
    def AdminConfigFilePath() -> str: ...


class PyRevitDeployment:
    def __init__(self, name: str, paths: Iterable[str]): ...
    def ToString(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Paths(self) -> List: ...


class PyRevitEngineVersion:
    def __init__(self, version: int): ...
    @property
    def Default() -> PyRevitEngineVersion: ...
    @property
    def Version(self) -> int: ...
    def op_Implicit(v: PyRevitEngineVersion) -> int: ...
    def op_Explicit(v: int) -> PyRevitEngineVersion: ...
    @overload
    def op_Equality(v1: PyRevitEngineVersion, v2: PyRevitEngineVersion) -> bool: ...
    @overload
    def op_Inequality(v1: PyRevitEngineVersion, v2: PyRevitEngineVersion) -> bool: ...
    @overload
    def op_GreaterThan(v1: PyRevitEngineVersion, v2: PyRevitEngineVersion) -> bool: ...
    @overload
    def op_LessThan(v1: PyRevitEngineVersion, v2: PyRevitEngineVersion) -> bool: ...
    @overload
    def op_GreaterThanOrEqual(v1: PyRevitEngineVersion, v2: PyRevitEngineVersion) -> bool: ...
    @overload
    def op_LessThanOrEqual(v1: PyRevitEngineVersion, v2: PyRevitEngineVersion) -> bool: ...
    @overload
    def op_Equality(v1: PyRevitEngineVersion, v2: int) -> bool: ...
    @overload
    def op_Inequality(v1: PyRevitEngineVersion, v2: int) -> bool: ...
    @overload
    def op_GreaterThan(v1: PyRevitEngineVersion, v2: int) -> bool: ...
    @overload
    def op_LessThan(v1: PyRevitEngineVersion, v2: int) -> bool: ...
    @overload
    def op_GreaterThanOrEqual(v1: PyRevitEngineVersion, v2: int) -> bool: ...
    @overload
    def op_LessThanOrEqual(v1: PyRevitEngineVersion, v2: int) -> bool: ...
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    def ToString(self) -> str: ...


class PyRevitEngine:
    def __init__(self, id: str, engineVer: PyRevitEngineVersion, runtime: bool, enginePath: str, assemblyName: str, kernelName: str, engineDescription: str, isDefault: bool): ...
    def ToString(self) -> str: ...
    @property
    def Id(self) -> str: ...
    @property
    def Version(self) -> PyRevitEngineVersion: ...
    @property
    def Runtime(self) -> bool: ...
    @property
    def Path(self) -> str: ...
    @property
    def AssemblyName(self) -> str: ...
    @property
    def KernelName(self) -> str: ...
    @property
    def IsDefault(self) -> bool: ...
    @property
    def AssemblyPath(self) -> str: ...
    @property
    def Description(self) -> str: ...


class PyRevitEngines:
    def GetEngineFromManifest(manifest: RevitAddonManifest, clone: PyRevitClone) -> PyRevitEngine: ...


class PyRevitExtensionTypes:
    Unknown = 0
    UIExtension = 1
    LibraryExtension = 2


class PyRevitExtensionMetaData:


class PyRevitExtensionDefinition:
    @overload
    def __init__(self, jsonObj: JObject): ...
    @overload
    def __init__(self, extDefJsonFile: str): ...
    def ToString(self) -> str: ...
    @property
    def BuiltIn(self) -> bool: ...
    @property
    def DefaultEnabled(self) -> bool: ...
    @property
    def RocketModeCompatible(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Type(self) -> PyRevitExtensionTypes: ...
    @property
    def Description(self) -> str: ...
    @property
    def Author(self) -> str: ...
    @property
    def AuthorProfile(self) -> str: ...
    @property
    def Url(self) -> str: ...
    @property
    def Website(self) -> str: ...
    @property
    def ImageUrl(self) -> str: ...
    @property
    def Templates(self) -> Object: ...
    @property
    def Dependencies(self) -> Object: ...


class PyRevitExtension:
    def __init__(self, extensionPath: str): ...
    @property
    def InstallPath(self) -> str: ...
    @property
    def Definition(self) -> PyRevitExtensionDefinition: ...
    def ToString(self) -> str: ...
    @property
    def BuiltIn(self) -> bool: ...
    @property
    def RocketModeCompatible(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Type(self) -> PyRevitExtensionTypes: ...
    @property
    def Description(self) -> str: ...
    @property
    def Author(self) -> str: ...
    @property
    def AuthorProfile(self) -> str: ...
    @property
    def Url(self) -> str: ...
    @property
    def Website(self) -> str: ...
    @property
    def ImageUrl(self) -> str: ...
    @property
    def Templates(self) -> Object: ...
    @property
    def Dependencies(self) -> Object: ...
    @property
    def ConfigName(self) -> str: ...
    @property
    def Origin(self) -> str: ...
    @overload
    def SetOrigin(self, originUrl: str) -> None: ...
    @overload
    def GetCommands(self) -> List: ...
    @overload
    def GetCommand(self, commandName: str) -> PyRevitRunnerCommand: ...
    def GetExtensionDefFilePath(extPath: str) -> str: ...
    @overload
    def GetCommands(extPath: str) -> List: ...
    @overload
    def GetCommand(extPath: str, commandName: str) -> PyRevitRunnerCommand: ...
    def GetOrigin(installPath: str) -> str: ...
    @overload
    def SetOrigin(installPath: str, originUrl: str) -> None: ...
    def MakeConfigName(extName: str, extType: PyRevitExtensionTypes) -> str: ...
    def IsExtensionDirectory(path: str) -> bool: ...
    def GetAllExtensionTypes() -> List: ...
    def GetExtensionDirExt(extType: PyRevitExtensionTypes) -> str: ...
    def GetAllExtentionDirExts() -> List: ...
    def GetExtensionTypeFromDirExt(dirExt: str) -> PyRevitExtensionTypes: ...


class PyRevitExtensions:
    def FindExtensions(searchPath: str) -> List: ...
    def FindExtension(searchPath: str, searchPattern: str) -> PyRevitExtension: ...
    def LookupRegisteredExtensions(searchPattern: str) -> List: ...
    def FindRegisteredExtension(extensionName: str) -> PyRevitExtensionDefinition: ...
    def GetInstalledExtensions(searchPath: str) -> List: ...
    def GetInstalledExtension(searchPattern: str) -> PyRevitExtension: ...
    def GetShippedExtensions(clone: PyRevitClone) -> List: ...
    def GetShippedExtension(clone: PyRevitClone, searchPattern: str) -> PyRevitExtension: ...
    @overload
    def InstallExtension(extensionName: str, extensionType: PyRevitExtensionTypes, repoPath: str, destPath: str, branchName: str, credentials: GitInstallerCredentials) -> None: ...
    @overload
    def InstallExtension(extDef: PyRevitExtensionDefinition, destPath: str, branchName: str) -> None: ...
    def RemoveExtension(repoPath: str, removeSearchPath: bool) -> None: ...
    @overload
    def UninstallExtension(ext: PyRevitExtension, removeSearchPath: bool) -> None: ...
    @overload
    def UninstallExtension(extensionName: str, removeSearchPath: bool) -> None: ...
    @overload
    def UpdateExtension(ext: PyRevitExtension, credentials: GitInstallerCredentials) -> None: ...
    @overload
    def UpdateExtension(extName: str, credentials: GitInstallerCredentials) -> None: ...
    def UpdateAllInstalledExtensions(credentials: GitInstallerCredentials) -> None: ...
    def EnableInstalledExtension(searchPattern: str) -> None: ...
    def DisableInstalledExtension(searchPattern: str) -> None: ...
    def EnableShippedExtension(clone: PyRevitClone, searchPattern: str) -> None: ...
    def DisableShippedExtension(clone: PyRevitClone, searchPattern: str) -> None: ...
    def GetRegisteredExtensionSearchPaths() -> List: ...
    def RegisterExtensionSearchPath(searchPath: str) -> None: ...
    def UnregisterExtensionSearchPath(searchPath: str) -> None: ...
    def GetDefaultExtensionLookupSource() -> str: ...
    def GetRegisteredExtensionLookupSources() -> List: ...
    def RegisterExtensionLookupSource(extLookupSource: str) -> None: ...
    def UnregisterExtensionLookupSource(extLookupSource: str) -> None: ...
    def UnregisterAllExtensionLookupSources() -> None: ...


class PyRevitProductInfo:
    def __init__(self): ...
    @property
    def product(self) -> str: ...
    @product.setter
    def product(self, value: str) -> None: ...
    @property
    def release(self) -> str: ...
    @release.setter
    def release(self, value: str) -> None: ...
    @property
    def version(self) -> str: ...
    @version.setter
    def version(self, value: str) -> None: ...
    @property
    def key(self) -> str: ...
    @key.setter
    def key(self, value: str) -> None: ...


class PyRevitProductData:
    def __init__(self): ...
    def GetProductInfo(identifier: str) -> PyRevitProductInfo: ...
    def GetAllProductInfo() -> List: ...
    def Update() -> None: ...


class PyRevitProduct:
    def __init__(self, prodInfo: PyRevitProductInfo): ...
    def ToString(self) -> str: ...
    def GetHashCode(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @property
    def Release(self) -> str: ...
    @Release.setter
    def Release(self, value: str) -> None: ...
    @property
    def Version(self) -> Version: ...
    @Version.setter
    def Version(self, value: Version) -> None: ...
    @property
    def InstallerId(self) -> str: ...
    @InstallerId.setter
    def InstallerId(self, value: str) -> None: ...
    def LookupRevitProduct(releaseOrVersionOrIdString: str) -> PyRevitProduct: ...
    def ListKnownProducts() -> List: ...


class PyRevitRelease(GithubReleaseInfo):
    def __init__(self): ...
    @property
    def IsPyRevitRelease(self) -> bool: ...
    @property
    def IsCLIRelease(self) -> bool: ...
    @property
    def ArchiveURL(self) -> str: ...


class PyRevitReleases:
    def GetLatestRelease(includePreRelease: bool) -> PyRevitRelease: ...
    def GetReleases() -> List: ...
    def FindReleases(searchPattern: str, includePreRelease: bool) -> List: ...
    def GetLatestPyRevitReleaseVersion() -> Version: ...
    def GetLatestCLIReleaseVersion() -> Version: ...


class PyRevitRunnerCommand:
    def __init__(self, commandPath: str): ...
    def ToString(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Path(self) -> str: ...


class PyRevitRunnerExecEnv:
    def __init__(self, attachment: PyRevitAttachment): ...
    def Begin(self, script: str, modelPaths: Iterable[str], opts: PyRevitRunnerOptions) -> None: ...
    def End(self, opts: PyRevitRunnerOptions) -> None: ...
    @property
    def Attachment(self) -> PyRevitAttachment: ...
    @property
    def Script(self) -> str: ...
    @property
    def ModelPaths(self) -> Iterable[str]: ...
    @property
    def AllowDialogs(self) -> bool: ...
    @property
    def PurgeAfterExec(self) -> bool: ...
    @property
    def Revit(self) -> RevitProduct: ...
    @property
    def Clone(self) -> PyRevitClone: ...
    @property
    def Engine(self) -> PyRevitEngine: ...
    @property
    def ExecutionId(self) -> str: ...
    @property
    def WorkingDirectory(self) -> str: ...
    @property
    def JournalFile(self) -> str: ...
    @property
    def LogFile(self) -> str: ...
    @property
    def PyRevitCloneRunner(self) -> str: ...
    @property
    def PyRevitRunnerManifestFile(self) -> str: ...
    @property
    def Purged(self) -> bool: ...


class PyRevitRunnerOptions:
    def __init__(self): ...
    @property
    def PurgeTempFiles(self) -> bool: ...
    @PurgeTempFiles.setter
    def PurgeTempFiles(self, value: bool) -> None: ...
    @property
    def AllowDialogs(self) -> bool: ...
    @AllowDialogs.setter
    def AllowDialogs(self, value: bool) -> None: ...
    @property
    def ImportPath(self) -> str: ...
    @ImportPath.setter
    def ImportPath(self, value: str) -> None: ...


class PyRevitRunner:
    def Run(attachment: PyRevitAttachment, scriptPath: str, modelPaths: Iterable[str], opts: PyRevitRunnerOptions) -> PyRevitRunnerExecEnv: ...


class PyRevitScriptTypes:
    Unknown = 0
    Python = 1
    CSharp = 2
    VisualBasic = 3
    Ruby = 4
    Dynamo = 5
    Grasshopper = 6
    RevitFamily = 7


class PyRevitScript:
    def __init__(self): ...
    def IsType(scriptPath: str, scriptType: PyRevitScriptTypes) -> bool: ...

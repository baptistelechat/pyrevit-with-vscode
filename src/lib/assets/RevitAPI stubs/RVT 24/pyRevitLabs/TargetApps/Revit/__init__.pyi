from typing import Tuple, Set, Iterable, List


class RevitAddonManifest:
    def __init__(self, manifestFile: str): ...
    @property
    def FilePath(self) -> str: ...
    @FilePath.setter
    def FilePath(self, value: str) -> None: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @property
    def Assembly(self) -> str: ...
    @Assembly.setter
    def Assembly(self, value: str) -> None: ...
    @property
    def AddInId(self) -> str: ...
    @AddInId.setter
    def AddInId(self, value: str) -> None: ...
    @property
    def FullClassName(self) -> str: ...
    @FullClassName.setter
    def FullClassName(self, value: str) -> None: ...
    @property
    def VendorId(self) -> str: ...
    @VendorId.setter
    def VendorId(self, value: str) -> None: ...


class RevitAddons:
    def GetRevitAddonsFolder(revitYear: int, allUsers: bool) -> str: ...
    def GetRevitAddonsFilePath(revitYear: int, addinFileName: str, allusers: bool) -> str: ...
    def CreateManifestFile(revitYear: int, addinFileName: str, addinName: str, assemblyPath: str, addinId: str, addinClassName: str, vendorId: str, allusers: bool, addinPath: str) -> None: ...
    def GetAttachedManifest(addinName: str, revitYear: int, allUsers: bool) -> RevitAddonManifest: ...
    def RemoveManifestFile(revitYear: int, addinName: str, currentAndAllUsers: bool) -> None: ...
    def GetManifest(revitYear: int, addinName: str, allUsers: bool) -> RevitAddonManifest: ...
    def PrepareAddonPath(revitYear: int, allUsers: bool) -> str: ...


class RevitCacheType:
    BIM360Cache = 0


class RevitCaches:
    def __init__(self): ...
    def GetBIM360CacheDirectory(revitYear: int) -> str: ...
    def ClearCache(revitYear: int, cacheType: RevitCacheType) -> None: ...
    def ClearAllCaches(cacheType: RevitCacheType) -> None: ...


class RevitController:
    def __init__(self): ...
    @overload
    def ListRunningRevits() -> List: ...
    @overload
    def ListRunningRevits(revitVersion: Version) -> List: ...
    @overload
    def ListRunningRevits(revitYear: int) -> List: ...
    @overload
    def KillRunningRevits(revitVersion: Version) -> None: ...
    @overload
    def KillRunningRevits(revitYear: int) -> None: ...
    def KillAllRunningRevits() -> None: ...


class RevitModelFileOpenWorksetConfig:
    All = 0
    Unknown = 1
    Editable = 2
    LastViewed = 3
    Specify = 4


class RevitModelFile:
    def __init__(self, filePath: str): ...
    def IsRevitFile(filePath: str) -> bool: ...
    @property
    def FilePath(self) -> str: ...
    @property
    def IsFamily(self) -> bool: ...
    @property
    def IsWorkshared(self) -> bool: ...
    @property
    def LastSavedPath(self) -> str: ...
    @property
    def BuildInfoLine(self) -> str: ...
    @property
    def CentralModelPath(self) -> str: ...
    @property
    def OpenWorksetConfig(self) -> RevitModelFileOpenWorksetConfig: ...
    @property
    def DocumentIncrement(self) -> int: ...
    @property
    def UniqueId(self) -> Guid: ...
    @property
    def LastReloadLatestUniqueId(self) -> Guid: ...
    @property
    def RevitProduct(self) -> RevitProduct: ...
    @property
    def ProjectInfoProperties(self) -> Dictionary: ...
    @property
    def CategoryName(self) -> str: ...
    @property
    def HostCategoryName(self) -> str: ...


class RevitProcess:
    def __init__(self, runningRevitProcess: Process): ...
    def IsRevitProcess(runningProcess: Process) -> bool: ...
    @property
    def ProcessId(self) -> int: ...
    @property
    def Module(self) -> str: ...
    @property
    def RevitProduct(self) -> RevitProduct: ...
    def ToString(self) -> str: ...
    def Kill(self) -> None: ...


class HostProductInfoMeta:
    def __init__(self): ...
    @property
    def schema(self) -> str: ...
    @schema.setter
    def schema(self, value: str) -> None: ...
    @property
    def source(self) -> str: ...
    @source.setter
    def source(self, value: str) -> None: ...


class HostProductInfo:
    def __init__(self): ...
    @property
    def meta(self) -> HostProductInfoMeta: ...
    @meta.setter
    def meta(self, value: HostProductInfoMeta) -> None: ...
    @property
    def product(self) -> str: ...
    @product.setter
    def product(self, value: str) -> None: ...
    @property
    def release(self) -> str: ...
    @release.setter
    def release(self, value: str) -> None: ...
    @property
    def version(self) -> str: ...
    @version.setter
    def version(self, value: str) -> None: ...
    @property
    def build(self) -> str: ...
    @build.setter
    def build(self, value: str) -> None: ...
    @property
    def target(self) -> str: ...
    @target.setter
    def target(self, value: str) -> None: ...
    @property
    def notes(self) -> str: ...
    @notes.setter
    def notes(self, value: str) -> None: ...


class RevitProductData:
    def __init__(self): ...
    def ExtractBuildNumberFromString(inputString: str) -> str: ...
    def ExtractBuildTargetFromString(inputString: str) -> str: ...
    def GetProductInfo(identifier: str) -> HostProductInfo: ...
    def GetAllProductInfo() -> List: ...
    def GetBinaryLocation(installPath: str) -> str: ...
    @overload
    def GetProductYear(inputString: str) -> int: ...
    @overload
    def GetProductYear(version: Version) -> int: ...
    def GetBinaryProductInfo(binaryPath: str) -> HostProductInfo: ...
    def Update() -> None: ...


class RevitProduct:
    def ToString(self) -> str: ...
    def GetHashCode(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def ProductYear(self) -> int: ...
    @property
    def Version(self) -> Version: ...
    @property
    def BuildNumber(self) -> str: ...
    @property
    def BuildTarget(self) -> str: ...
    @property
    def DefaultInstallLocation(self) -> str: ...
    @property
    def InstallLocation(self) -> str: ...
    @InstallLocation.setter
    def InstallLocation(self, value: str) -> None: ...
    @property
    def ExecutiveLocation(self) -> str: ...
    @property
    def LanguageCode(self) -> int: ...
    @LanguageCode.setter
    def LanguageCode(self, value: int) -> None: ...
    @overload
    def LookupRevitProduct(buildOrVersionString: str) -> RevitProduct: ...
    @overload
    def LookupRevitProduct(version: Version) -> RevitProduct: ...
    def ListInstalledProducts() -> List: ...
    def ListSupportedProducts() -> List: ...


class RevitServerConfig:
    def __init__(self, version: str, name: str): ...
    def ToString(self) -> str: ...


class RevitServerConfigurations:
    def GetAvailableServers() -> List: ...
    def GetAvailableServersByVersion() -> Dictionary: ...
    def GetAvailableServersByName() -> Dictionary: ...
